import cv2
from matplotlib import pyplot as plt
import numpy as np
import pytesseract

# Define the path to the Tesseract executable
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe'  # Tesseract path

def display(im_path):
    dpi = 80
    im_data = plt.imread(im_path)
    height, width = im_data.shape[:2]
    figsize = width / float(dpi), height / float(dpi)
    fig = plt.figure(figsize=figsize)
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    ax.imshow(im_data, cmap='gray')
    plt.show()

def bw_img1(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    thresh, img_bw = cv2.threshold(gray_image, 70, 130, cv2.THRESH_BINARY)
    return img_bw

def bw_img2(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Use Otsu's method to determine the best threshold value
    _, img_bw = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return img_bw


def noise_removal(image):
    kernel = np.ones((1, 1), np.uint8)
    image = cv2.dilate(image, kernel, iterations=1)
    image = cv2.erode(image, kernel, iterations=1)
    image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)
    image = cv2.medianBlur(image, 3)
    return image

def thin_font(image):
    image = cv2.bitwise_not(image)
    kernel = np.ones((2, 2), np.uint8)
    image = cv2.erode(image, kernel, iterations=1)
    image = cv2.bitwise_not(image)
    return image

def remove_borders(image):
    contours, _ = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cntsSorted = sorted(contours, key=lambda x: cv2.contourArea(x))
    cnt = cntsSorted[-1]
    x, y, w, h = cv2.boundingRect(cnt)
    crop = image[y:y + h, x:x + w]
    return crop

def getSkewAngle(cvImage) -> float:
    newImage = cvImage.copy()
    gray = cv2.cvtColor(newImage, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (9, 9), 0)
    thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (30, 5))
    dilate = cv2.dilate(thresh, kernel, iterations=2)
    contours, _ = cv2.findContours(dilate, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)
    largestContour = contours[0]
    minAreaRect = cv2.minAreaRect(largestContour)
    angle = minAreaRect[-1]
    if angle < -45:
        angle = 90 + angle
    if angle > 45:
        angle = angle - 90
    return angle

def rotateImage(cvImage, angle: float):
    newImage = cvImage.copy()
    (h, w) = newImage.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    newImage = cv2.warpAffine(newImage, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
    return newImage

def deskew(cvImage):
    angle = getSkewAngle(cvImage)
    return rotateImage(cvImage, -1.0 * angle)

def preprocess(image):
    rotated = deskew(image)
    img_bw = bw_img2(rotated)
    no_noise = noise_removal(img_bw)
    no_borders = remove_borders(no_noise)
    thinFont_image = thin_font(no_borders)
    return thinFont_image

def perform_ocr(image):
    # Preprocess the image
    processed_image = preprocess(image)

    # Perform OCR using Tesseract
    custom_config = r'--oem 3 --psm 6 -l tha+eng'  # Specify OCR Engine Mode (OEM) and Page Segmentation Mode (PSM)
    text = pytesseract.image_to_string(processed_image, config=custom_config)
    return text

def extract_image(image):
    # Define ROI ratios for the picture region (adjust these values as needed)
    roi_ratios = (0.63, 0.46, 0.16, 0.25)  # These values are examples; adjust based on your image layout

    height, width = image.shape[:2]
    x_ratio, y_ratio, w_ratio, h_ratio = roi_ratios
    x = int(x_ratio * width)
    y = int(y_ratio * height)
    w = int(w_ratio * width)
    h = int(h_ratio * height)

    if x < 0 or y < 0 or x + w > width or y + h > height:
        raise ValueError("ROI coordinates are outside the image boundaries.")

    roi = image[y:y+h, x:x+w]

    # Display the ROI
    cv2.imshow("Person Picture ROI", roi)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return roi


def ocr_id(image):
    processed_image = preprocess(image)
    roi_ratios = (0.46, 0.27, 0.25, 0.05)  # Adjust these values as needed

    height, width = processed_image.shape
    x_ratio, y_ratio, w_ratio, h_ratio = roi_ratios
    x = int(x_ratio * width)
    y = int(y_ratio * height)
    w = int(w_ratio * width)
    h = int(h_ratio * height)

    # Debugging output
    #print(f"Image dimensions: {width}x{height}")
    #print(f"Calculated ROI: x={x}, y={y}, w={w}, h={h}")

    if x < 0 or y < 0 or x + w > width or y + h > height:
        raise ValueError("ROI coordinates are outside the image boundaries.")

    roi = processed_image[y:y+h, x:x+w]

    # Display the ROI
    cv2.imshow("ID ROI", roi)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    custom_config = r'--oem 3 --psm 6 -l eng -c tessedit_char_whitelist=0123456789'
    text = pytesseract.image_to_string(roi, config=custom_config)
    return text

def ocr_firstname(image):
    processed_image = preprocess(image)
    roi_ratios = (0.45, 0.375, 0.25, 0.05)  # Adjust these values as needed

    height, width = processed_image.shape
    x_ratio, y_ratio, w_ratio, h_ratio = roi_ratios
    x = int(x_ratio * width)
    y = int(y_ratio * height)
    w = int(w_ratio * width)
    h = int(h_ratio * height)

    # Debugging output
    #print(f"Image dimensions: {width}x{height}")
    #print(f"Calculated ROI: x={x}, y={y}, w={w}, h={h}")

    if x < 0 or y < 0 or x + w > width or y + h > height:
        raise ValueError("ROI coordinates are outside the image boundaries.")

    roi = processed_image[y:y+h, x:x+w]

    # Display the ROI
    cv2.imshow("First Name ROI", roi)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    custom_config = r'--oem 3 --psm 6 -l eng -c tessedit_char_whitelist=.AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz.'
    text = pytesseract.image_to_string(roi, config=custom_config)
    return text

def ocr_lastname(image):
    processed_image = preprocess(image)
    roi_ratios = (0.46, 0.42, 0.3, 0.04)  # Adjust these values as needed

    height, width = processed_image.shape
    x_ratio, y_ratio, w_ratio, h_ratio = roi_ratios
    x = int(x_ratio * width)
    y = int(y_ratio * height)
    w = int(w_ratio * width)
    h = int(h_ratio * height)

    # Debugging output
    #print(f"Image dimensions: {width}x{height}")
    #print(f"Calculated ROI: x={x}, y={y}, w={w}, h={h}")

    if x < 0 or y < 0 or x + w > width or y + h > height:
        raise ValueError("ROI coordinates are outside the image boundaries.")

    roi = processed_image[y:y+h, x:x+w]

    # Display the ROI
    cv2.imshow("Last Name ROI", roi)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    custom_config = r'--oem 3 --psm 6 -l eng -c tessedit_char_whitelist=AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'

    text = pytesseract.image_to_string(roi, config=custom_config)
    return text

if __name__ == '__main__':
    image_file = "C:/Users/User/OneDrive/Desktop/testOCR/test1.jpg"
    img = cv2.imread(image_file)

    #test ppc img
    #ppc_img = preprocess(img)
    #cv2.imwrite("C:/Users/User/OneDrive/Desktop/testOCR/ppc_test.jpg", ppc_img)
    #display("C:/Users/User/OneDrive/Desktop/testOCR/ppc_test.jpg")

    #show picture
    person_picture = extract_image(img)
    #cv2.imwrite("C:/Users/User/OneDrive/Desktop/testOCR/person_picture.jpg", person_picture)

    #Show id
    id_text = ocr_id(img)
    print(f"ID: {id_text}")

    #Show firstname
    firstname_text = ocr_firstname(img)
    print(firstname_text)

    #Show Lastname
    lastname_text = ocr_lastname(img)
    print(lastname_text)

    #extracted_text = perform_ocr(img)
    #print("Extracted Text:")
    #print(extracted_text)
